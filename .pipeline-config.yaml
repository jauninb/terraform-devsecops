version: '1'

test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12
  script: |
    #!/usr/bin/env bash
    echo "Do nothing yet"

static-scan:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12
  script: |
    #!/bin/bash
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
     trap env EXIT
     env
     set -x
    fi
    pwd

    if which tfsec > /dev/null 2>&1; then
      tfsec --version
    else 
      echo "Installing tfsec"
      curl -sL https://github.com/aquasecurity/tfsec/releases/download/v0.58.6/tfsec-linux-amd64 -o /usr/bin/tfsec && chmod +x /usr/bin/tfsec
      tfsec --version
    fi

    TF_STATIC_SCAN_STATUS="${WORKSPACE}/tf-static-scan-status"
    touch "${TF_STATIC_SCAN_STATUS}"

    list_repos | while IFS= read -r repo ; do
      url="$(load_repo "$repo" url)"
      sha="$(load_repo "$repo" commit)"
      branch="$(load_repo "$repo" branch)"
      path="$(load_repo "$repo" path)"

      echo "repo=$repo url=$url sha=$sha branch=$branch path=$path"

      tf_vars_file=$(get_env tf_vars_file "")
      if [[ "$tf_vars_file" != "" ]]; then
        export VAR_FILE_ARG=" --tfvars-file ${WORKSPACE}/${path}/$tf_vars_file"
      fi

      echo "tfsec ${WORKSPACE}/${path} $VAR_FILE_ARG"
      tfsec ${WORKSPACE}/${path} $VAR_FILE_ARG 
      exit_code=$?
      if [ $exit_code -ne 0 ]; then
        echo "failure" >> "${TF_STATIC_SCAN_STATUS}"
      fi
    done

    echo "exiting accordingly"
    #
    # check if any of the scans failed
    #
    if [ "$(cat "${TF_STATIC_SCAN_STATUS}")" = "failure" ]; then
        TF_STATIC_SCAN_RESULTS_STATUS="failure"
        exit 1
    else
        TF_STATIC_SCAN_RESULTS_STATUS="success"
    fi
